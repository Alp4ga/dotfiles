{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Generate c++ class with doxygen doc": {
		"prefix": "cc",
		"body": [
		  "${6}",
		  "",
		  "#pragma once",
		  "",
		  "/*! @namespace ${1}",
		  " * @brief ${2}",
		  "*/",
		  "namespace ${1} {",
		  "    class ${3};",
		  "};",
		  "",
		  "/*! @class ${1}::${3}",
		  " * @brief ${4}",
		  " * ${5}",
		  "*/",
		  "class ${1}::${3} {",
		  "    public:",
		  "        /*!",
		  "         * @brief Default constructor class ${3}",
		  "        */",
		  "        ${3}() noexcept = default;",
		  "        /*!",
		  "         * @brief Default descructor class ${3}",
		  "        */",
		  "        ~${3}() noexcept = default;",
		  "        /*!",
		  "         * @brief Default copy constructor class ${3}",
		  "        */",
		  "        ${3}(const ${3} &) noexcept = default;",
		  "        /*!",
		  "         * @brief Default constructor class ${3}",
		  "        */",
		  "        ${3} &operator=(const ${3} &) noexcept = default;",
		  "",
		  "    private:",
		  "};"
		],
		"description": "Generate c++ class with doxygen doc"
	},

	"Generat c++ const std::string &": {
		"prefix": "csr",
		"body": ["const std::string &"],
		"description": "Generat c++ const std::string &"
	},

	"Generat c++ const std::string": {
		"prefix": "cs",
		"body": ["const std::string"],
		"description": "Generat c++ const std::string"
	},

	"Generat c++ output stream": {
		"prefix": "co",
		"body": "std::cout << \"$1\" << std::endl;",
		"description": "Generat c++ output stream"
	},

	/*
	 * Documentation oxygen snipet
	*/
	"Doxygene namespace": {
		"prefix": "docNamespace",
		"body": [
			"/*! @namespace ${1}",
			" * @brief ${2}",
			"*/"
		],
		"description": "Generate c++ documation oxygen for a namesapce"
	},


	"Doxygene class": {
		"prefix": "docClass",
		"body": [
			"/*! @class ${1}",
			" * @brief ${2}",
			" * ${3}",
			"*/"
		],
		"description": "Generate c++ documation oxygen for a class"
	},

	"Doxygene struct": {
		"prefix": "docStruct",
		"body": [
			"/*! @struct ${1}",
			" * @brief ${2}",
			"*/"
		],
		"description": "Generate c++ documation oxygen for a struct"
	},

	"Doxygene enum": {
		"prefix": "docEnum",
		"body": [
			"/*! @enum ${1}",
			" * @brief ${2}",
			"*/"
		],
		"description": "Generate c++ documation oxygen for a struct"
	},

	"Doxygene function": {
		"prefix": "docFunction",
		"body": [
			"/*! @fn ${1}",
			" * @brief ${2}",
			" *",
			" * @param ${3} ${4}",
			" *",
			" * @return ${5}",
			"*/"
		],
		"description": "Generate c++ documation oxygen for a function"
	},

	"Doxygene def": {
		"prefix": "docDef",
		"body": [
			"/*! @def ${1}",
			" * @brief ${2}",
			"*/"
		],
		"description": "Generate c++ documation oxygen for a definition"
	},

	"Doxygene brief": {
		"prefix": "docB",
		"body": [
			"/*!",
			" * @brief ${1}",
			"*/"
		],
		"description": "Generate c++ documation oxygen for a simple brief"
	}

}